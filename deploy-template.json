{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "functionAppName": {
            "type": "string",
            "defaultValue": "[concat('sentinel-reopen-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Name of the Function App"
            }
        },
        "subscriptionId": {
            "type": "string",
            "defaultValue": "[subscription().subscriptionId]",
            "metadata": {
                "description": "Azure subscription ID"
            }
        },
        "resourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Resource group containing Sentinel workspace"
            }
        },
        "sentinelWorkspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Sentinel workspace"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for the resources"
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "EP1",
            "allowedValues": [
                "Y1",
                "EP1",
                "EP2",
                "EP3"
            ],
            "metadata": {
                "description": "SKU for the hosting plan (Y1=Consumption, EP1-3=Premium)"
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat('stfunc', uniqueString(resourceGroup().id))]",
        "hostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
        "applicationInsightsName": "[concat(parameters('functionAppName'), '-ai')]",
        "isConsumptionPlan": "[equals(parameters('skuName'), 'Y1')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-08-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                }
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-02-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[if(variables('isConsumptionPlan'), 'Dynamic', 'ElasticPremium')]",
                "size": "[parameters('skuName')]",
                "family": "[if(variables('isConsumptionPlan'), 'Y', 'EP')]"
            },
            "properties": {
                "computeMode": "Dynamic",
                "reserved": true,
                "maximumElasticWorkerCount": "[if(variables('isConsumptionPlan'), json('null'), 20)]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-02-01",
            "name": "[parameters('functionAppName')]",
            "location": "[parameters('location')]",
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "reserved": true,
                "httpsOnly": true,
                "siteConfig": {
                    "linuxFxVersion": "Python|3.11",
                    "alwaysOn": "[not(variables('isConsumptionPlan'))]",
                    "ftpsState": "Disabled",
                    "minTlsVersion": "1.2",
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(parameters('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
                        },
                        {
                            "name": "SENTINEL_SUBSCRIPTION_ID",
                            "value": "[parameters('subscriptionId')]"
                        },
                        {
                            "name": "SENTINEL_RESOURCE_GROUP",
                            "value": "[parameters('resourceGroupName')]"
                        },
                        {
                            "name": "SENTINEL_WORKSPACE_NAME",
                            "value": "[parameters('sentinelWorkspaceName')]"
                        },
                        {
                            "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                            "value": "true"
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "functionAppName": {
            "type": "string",
            "value": "[parameters('functionAppName')]"
        },
        "functionAppUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName'))).defaultHostName)]"
        },
        "functionApiUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName'))).defaultHostName, '/api/reopen_incidents')]"
        },
        "managedIdentityPrincipalId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2021-02-01', 'Full').identity.principalId]"
        },
        "resourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "subscriptionId": {
            "type": "string",
            "value": "[subscription().subscriptionId]"
        },
        "nextSteps": {
            "type": "object",
            "value": {
                "step1": "‚úÖ Infrastructure deployed successfully!",
                "step2": "üì¶ Run the deployment script below to upload function code",
                "step3": "üîê Grant Sentinel permissions using the provided command",
                "step4": "üß™ Test the function",
                "deploymentScript": "[concat('curl -s https://raw.githubusercontent.com/YOUR_REPO/main/deploy-function.ps1 | powershell -Command \"& {[System.IO.File]::WriteAllText(\\\"deploy-temp.ps1\\\", [System.IO.StreamReader]::new([System.Net.WebRequest]::Create(\\\"https://raw.githubusercontent.com/YOUR_REPO/main/deploy-function.ps1\\\").GetResponse().GetResponseStream()).ReadToEnd()); .\\\\deploy-temp.ps1 -FunctionAppName ', parameters('functionAppName'), ' -ResourceGroupName ', resourceGroup().name, '; Remove-Item deploy-temp.ps1}\"')]",
                "permissionCommand": "[concat('az role assignment create --assignee \"', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2021-02-01', 'Full').identity.principalId, '\" --role \"ab8e14d6-4a74-4a29-9ba8-549422addade\" --scope \"/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', parameters('sentinelWorkspaceName'), '\"')]",
                "testCommand": "[concat('curl \"', concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName'))).defaultHostName, '/api/reopen_incidents'), '\"')]"
            }
        }
    }
}